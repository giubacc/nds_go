package net

import (
	"encoding/json"
)

type MsgKey string

const (
	MsgKeyPktType        = "_pt" //packet type
	MsgKeyPktSrcIP       = "_si" //packet source ip: the ip of the outgoing interface of the source host
	MsgKeyPktSrcLstnPort = "_lp" //packet source listening port: the listening port of the source host
	MsgKeyPktTS          = "_ts" //packet timestamp: the timestamp of the packet
	MsgKeyPktDataVal     = "_dv" //packet data: the value inside a Data packet (TCP)
	MsgKeyInterrupt      = "_ir" //packet interrupt: a key used to generate events inside the application (interrupts generated by selector/peer)
)

/**
 * Alive message (UDP multicast):
 *
 *      {
 *       "_lp" : 31582,
 *       "_pt" : "an",
 *       "_si" : "172.17.0.2",
 *       "_ts" : 1612981749
 *      }
 */
type AliveMsg struct {
	Lp uint16 `json:"_lp"`
	Pt string `json:"_pt"`
	Si string `json:"_si"`
	Ts uint64 `json:"_ts"`
}

func (msg *AliveMsg) UnmarshalJSON(buffer []byte) error {
	err := json.Unmarshal(buffer, msg)
	if err != nil {
		//fmt.Println("error:", err)
	}
	return err
}

/**
 * An example of Data message (TCP):
 *
 *     {
 *      "_dv" : "Jerico",
 *      "_pt" : "dt",
 *      "_ts" : 1612981862
 *     }
 */
type DataMsg struct {
	Dv string `json:"_dv"`
	Pt string `json:"_pt"`
	Ts uint64 `json:"_ts"`
}
